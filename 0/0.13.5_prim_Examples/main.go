package main

import (
	"fmt"
	"time"
)

// Пример 1: Определение продолжительности выполнения операции

/*func main() {
	// Записываем текущее время до начала операции
	startTime := time.Now()

	// Здесь вы можете выполнять какую-нибудь долгую операцию —
	// например, обработку большого объема данных или вычисления

	// Допустим, мы выполняем операцию, которая имитирует задержку
	for i := 0; i < 1000000; i++ {
		// Делаем что-то
	}

	// Записываем время после того, как операция выполнена
	elapsed := time.Since(startTime)

	// Проверяем, сколько времени заняла операция
	// Если операция заняла более 1 секунды, мы считаем её слишком долгой
	if elapsed.Seconds() > 1 {
		fmt.Println("Операция заняла слишком много времени")
	} else {
		fmt.Println("Операция завершена за", elapsed)
	}
}*/

// Пример 2: Планирование выполнения задачи с использованием таймера
/*func main() {
	// Устанавливаем интервал времени для таймера (в данном случае, 5 секунд)
	interval := 5 * time.Second

	// Создаём новый таймер с указанным интервалом
	timer := time.NewTimer(interval)

	fmt.Println("Задача будет выполнена через", interval)

	// Ожидаем события от таймера (пока не прошло 5 секунд)
	<-timer.C

	fmt.Println("Задача выполнена!")
}*/

// Пример 3: Работа с часовыми поясами и форматирование времени

func main() {
	// Устанавливаем часовой пояс UTC
	loc, err := time.LoadLocation("UTC")
	if err != nil {
		fmt.Println("Ошибка при загрузке часового пояса:", err)
		return
	}

	// Получаем текущее время в указанном часовом поясе
	currentTime := time.Now().In(loc)

	// Форматируем время в строку с заданным форматом
	formattedTime := currentTime.Format("2006-01-02 15:04:05")

	fmt.Println("Текущее время (UTC):", formattedTime)
}
