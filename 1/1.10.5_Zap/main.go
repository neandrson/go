package main

import (
	"time"

	"go.uber.org/zap"
)

func main() {
	/*logger, _ := zap.NewProduction() //Zap — это быстрая и эффективная библиотека логирования для Go от Uber
	defer logger.Sync()

	logger.Info("Hello, World!")*/ // type AutoGenerated struct {"level":"info","ts":1634740800.000001,"caller":"main.go:10","msg":"Hello, World!"}

	/*logger, err := zap.NewDevelopment() // Development - выводит логи в удобном для чтения виде, а также включает в себя стек вызовов для каждого сообщения лога
	if err != nil {
		log.Fatalf("can't initialize zap logger: %v", err)
	}
	defer logger.Sync()

	logger.Info("Hello, world!")*/ // 2021-11-04T12:00:00.000+02:00    INFO    example/main.go:14    Hello, world!

	/*logger, err := zap.NewProduction() // Production - оптимизирована, чтобы быть максимально производительной и безопасной
	if err != nil {
		log.Fatalf("can't initialize zap logger: %v", err)
	}
	defer logger.Sync()

	logger.Info("Hello, world!")*/ // type AutoGenerated struct {"level":"info","ts":1636046400.000001,"caller":"example/main.go:14","msg":"Hello, world!"}

	// Создаём конфигурацию для логгера
	/*logger, err := zap.NewProduction()
	if err != nil {
		return
	}
	defer logger.Sync()

	// Добавляем поля
	logger.With(zap.String("user", "JohnDoe"), zap.Int("age", 30)). // {"level":"info","ts":1694754718.482332,"caller":"awesomeProject14/main.go:15","msg":"User login","user":"JohnDoe","age":30}
									Info("User login")

	// Другой пример с полями
	logger.With(zap.String("city", "New York"), zap.Float64("temperature", 78.5)). // {"level":"warn","ts":1694754718.4825048,"caller":"awesomeProject14/main.go:19","msg":"Weather update","city":"New York","temperature":78.5}
											Warn("Weather update")

	// Логируем, не добавляя поля
	logger.Info("Simple log message")*/ // {"level":"info","ts":1694754718.4825149,"caller":"awesomeProject14/main.go:22","msg":"Simple log message"}

	logger, _ := zap.NewProduction()
	defer logger.Sync() // flushes buffer, if any
	// Вызываем SugaredLogger
	sugar := logger.Sugar()
	sugar.Infow("failed to fetch URL",
		// Можем прокидывать любые типы и не указывать их
		"url", "какой-то url",
		"attempt", 3,
		"backoff", time.Second,
	)
	sugar.Infof("Failed to fetch URL: %s", "какой-то url")
}
